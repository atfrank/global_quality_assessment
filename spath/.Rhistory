plot(y, y_train, xlab="predicted", ylab="actual")
plot(y, y_test, xlab="predicted", ylab="actual")
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual")
plot(y, y_test, xlab="predicted", ylab="actual")
mae <- function(x,y){mean(abs(x-y))}
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s")
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 10)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s")
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 10)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s")
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s")
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 2.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.labels = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100, 0, 1)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100, -1, 1)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(-1,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(-1,1))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(-1,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(-1,1))
abline(0,1)
y
?rnorm
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- abs(rnorm(100))
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)), xlim = c(0,1), ylim = c(0,1))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_train)))
abline(0,1)
plot(y, y_test, xlab="predicted", ylab="actual", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
mae <- function(x,y){mean(abs(x-y))}
# Demonstrating Over-fitting
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y <- rnorm(100)
y_train <- jitter(y, a = 0)
y_test <- jitter(y, a = 5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
abline(0,1)
plot(y, y_test, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
abline(0,1)
plot(y, y_test, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
0.7190357^2
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 1.5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 3.5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
abline(0,1)
plot(y, y_test, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_test)))
abline(0,1)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 3.5)
plot(y, y_train, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_train)))
plot(y, y_test, xlab="actual", ylab="predicted", main = sprintf("%4.2f", mae(y,y_test)))
par(mfrow=c(2,2), pty="s", cex = 1.0, cex.axis = 1.0, cex.lab = 1.0)
y_train <- jitter(y, a = 1)
y_test <- jitter(y, a = 3.5)
plot(y, y_test, xlab="predictor 2", ylab="predector 1")
install.packages('XML')
library(XML)
library(XML)
html.raw<-htmlTreeParse('http://onlinelibrary.wiley.com/doi/10.1002/9781118120187.ch1/pdf',useInternalNodes=T)
html.raw
html.parse<-xpathApply(html.raw, "//iframe", xmlValue)
html.parse
html.parse<-xpathApply(html.raw, "iframe", xmlValue)
html.parse
html.parse<-xpathApply(html.raw, "ifra
me", xmlValue)
html.raw <- htmlTreeParse('http://onlinelibrary.wiley.com/doi/10.1002/9781118120187.ch1/pdf',useInternalNodes=F)
xpathApply(html.raw, "//iframe", xmlValue)
html.raw <- htmlTreeParse('http://onlinelibrary.wiley.com/doi/10.1002/9781118120187.ch1/pdf',useInternalNodes=T)
xpathApply(html.raw, "//iframe", xmlValue)
xpathApply(html.raw, "//iframe")
unlist(xpathApply(html.raw, "//iframe"))
unlist(xpathApply(html.raw, "//iframe"))[1]
xpathApply(html.raw, "//iframe")
unlist(xpathApply(html.raw, "//iframe"))[1]
unlist(xpathApply(html.raw, "//iframe"))
unlist(unlist(xpathApply(html.raw, "//iframe")))
unlist(unlist(xpathApply(html.raw, "//iframe")))[1]
unlist(unlist(xpathApply(html.raw, "//iframe")))[[1]]
xpathApply(html.raw, "//iframe")
xpathApply(html.raw, "//iframe")
html.parse <- xpathApply(html.raw, "//iframe")
html.parse
grep('*src*',unlist(html.parse),value=T)
html.parse
unlist(html.parse)
unlist(html.parse)[[1]]
unlist(html.parse)[[1]]
strsplit(unlist(html.parse)[[1]], " ")
unlist(html.parse)[[1]]
unlist(html.parse)[[1]]
grep('*src*',unlist(html.parse))
unlist(html.parse)[[1]]
as.character(unlist(html.parse)[[1]])
unlist(html.parse)[[1]]
library(XML)
# Save the URL of the xml file in a variable
xml.url <- "http://onlinelibrary.wiley.com/doi/10.1002/9781118120187.ch1/pdf"
# Use the xmlTreePares-function to parse xml file directly from the web
xmlfile <- xmlTreeParse(xml.url)
# the xml file is now saved as an object you can easily work with in R:
class(xmlfile)
# Use the xmlRoot-function to access the top node
xmltop = xmlRoot(xmlfile)
xmltop
print(xmltop)[1:2]
html.raw
xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
# Finally, get the data in a data-frame and have a look at the first rows and columns
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df
xmlfile <- htmlTreeParse('http://onlinelibrary.wiley.com/doi/10.1002/9781118120187.ch1/pdf',useInternalNodes=T)
# the xml file is now saved as an object you can easily work with in R:
class(xmlfile)
# Use the xmlRoot-function to access the top node
xmltop = xmlRoot(xmlfile)
xmltop
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
# Finally, get the data in a data-frame and have a look at the first rows and columns
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df[1:5,1:4]
plantcat_df
html.parse <- xpathApply(html.raw, "//iframe")
html.parse
html.parse[[1]]
as.data.frame(html.parse[[1]])
html.parse <- xpathApply(html.raw, "//iframe")[[1]]
xmlSApply(html.parse, function(x) xmlSApply(x, xmlValue))
html.parse
html.parse[1]
html.parse[2]
html.parse[3]
html.parse
class(html.parse_
class(html.parse0
class(html.parse)
xpathApply(html.raw, "//iframe", saveXML)
unlist(xpathApply(html.raw, "//iframe", saveXML))
strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," ")
strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," ")[3]
unlist(strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," "))
unlist(strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," "))[3]
as.character(unlist(strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," "))[3])
?gsub
tmp <- as.character(unlist(strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," "))[3])
gsub("src=\", "", tmp)
)
))
<
))))))))))
""
tmp <- as.character(unlist(strsplit(unlist(xpathApply(html.raw, "//iframe", saveXML))," "))[3])
gsub("\", "", tmp)
""
gsub("/\", "", tmp)
""
gsub("\\", "", tmp)
gsub("([ab])", "\\1_\\1_", "abc and ABC")
tmp
strsplit(tmp, "\")
""
""
strsplit(tmp, "\\")
strsplit(tmp, "[\]")
strsplit(tmp, "\\\")
""
""
tmp
strsplit(tmp,"\"")
unlist(strsplit(tmp,"\""))
unlist(strsplit(tmp,"\""))[2]
unlist(strsplit(tmp,"\""))[2]
realURL <- unlist(strsplit(tmp,"\""))[2]
system(paste("wget ", realURL, sep = ""))
paste("wget ", realURL, sep = "")
paste("wget ", realURL)
cat(sprintf("%s%s%s\n",", realURL,"))
cat(sprintf("%s%s%s\n",\", realURL,\"))
cat(sprintf("%s%s%s\n","\, realURL,"\))
cat(sprintf("%s%s%s\n",'', realURL,'))
""
)
""
"""""
source('~/Documents/GitSoftware/LarmorD_New/error_predictor/scripts/prep_data.R')
source('~/Documents/GitSoftware/miR-21-screening/analysis.R')
source('~/Documents/GitSoftware/miR-21-screening/analysis.R')
22-5
22-17
22-7
22-15
22-6+1
19-9+1
?hist
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
cors[order(abs(cors$cors_p)),]
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
sensitivity()
sensitivity("2H2X","2M21")
sensitivity("1R2P","2LPS")
sensitivity("2KFC","2L1V")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
sensitivity("2KFC","2L1V")
sensitivity("2FRL","2M22")
sensitivity("2H2X","2M21")
sensitivity("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
plot_sensitivity("1R2P","2LPS", "C1'")
plot_sensitivity("2KFC","2L1V", "C1'")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
plot_sensitivity("2KFC","2L1V", "C6")
plot_sensitivity("2KFC","2L1V", "H1'")
plot_sensitivity("2KFC","2L1V", "H6")
plot_sensitivity("1R2P","2LPS", "H6")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
data <- get_trace("1R2P","2LPS")
head(data())
head(data
)
data[,1]
cut(data[,1])
?cut
cut(data[,1],10)
cut(data[,1], 10, labels = FALSE)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
data <- get_trace("1R2P","2LPS")
datap
data
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
data <- get_trace("1R2P","2LPS")
data
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
ddply(.data = data, .variables = c("label"), .fun = function(x){data.frame(mean=mean(x$rmsd), sd=sd(x$rmsd))})
data <- get_trace("1R2P","2LPS")
data
ddply(.data = data, .variables = c("label"), .fun = function(x){data.frame(mean=mean(x$rmsd), sd=sd(x$rmsd))})
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
data <- get_trace("1R2P","2LPS")
data
?with
library("Hmisc")
install.packages("Hmisc")
library("Hmisc")
library("survival")
install.packages("survival")
install.packages("survival")
install.packages("Hmisc")
library("Hmisc")
?errbar
data
data[[2]]
d <- data[[2]]
d
d <- data[[2]][,"rmsd_mean"]
d <- data[[2]][,c("rmsd_mean","larmord_mean","larmord_sd")]
d
d <- data[[2]][,c("rmsd_mean","larmord_mean","larmord_sd")]
d <- data[[2]][,c("rmsd_mean","larmord_mean","larmord_sd")]
colnames(d) <- c("x","y","sd")
plot(d$x, d$y, type="n")
with (data = d, expr = errbar(x, y, y+sd, y-sd, add=F, pch=1, cap=.015, log="x"))
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace()
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace()
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace()
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace()
get_trace("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS")
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
get_trace("1R2P","2LPS", 0.25)
source('~/Documents/GitSoftware/global_quality_assessment/spath/analyze_data.R')
source('~/Documents/GitSoftware/global_quality_assessment/spath/analysis.R')
get_trace("2KFC", "2L1V")
get_trace("2KFC", "2L1V", 0.10)
get_trace("2N6Q", "5KMZ", 0.10)
get_trace("2N6Q", "5KMZ", 0.10)
get_trace("2N6Q", "5KMZ", 0.10)
get_trace("2KFC", "2L1V", 0.10)
get_trace("1R2P", "2LPS", 0.20)
get_trace("2H2X", "2M21", 0.20)
get_trace("2H2X", "2M21", 0.20)
get_trace("2FRL", "2M22", 0.20)
