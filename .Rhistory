library("devtools")
setwd("/Users/atfrank/Documents/GitHub")
create("nmR")
setwd("./nmR")
document()
setwd("..")
install("nmR")
setwd("~/Desktop/nmr_pix2pix__testing/")
?png::readPNG
png::readPNG("images/1-outputs.png")
png1 <- png::readPNG("images/1-outputs.png")
png1 <- png::readPNG("images/1-inputs.png")
png2 <- png::readPNG("images/1-outputs.png")
png3 <- png::readPNG("images/1-targets.png")
png3
plot(png3)
image(png3)
png3 <- png::readPNG("images/1-targets.png")
png::writePNGPNG(png1, "images/1-inputs-test.png")
png::writePNGPNG(png2, "images/1-outputs-test.png")
png::writePNGPNG(png3, "images/1-targets-test.png")
png::writePNG(png1, "images/1-inputs-test.png")
png::writePNG(png2, "images/1-outputs-test.png")
png::writePNG(png3, "images/1-targets-test.png")
dim(png2)
png2
?png::
??png::
??png
shiny::plotPNG(png1)
shiny::plotPNG(png1)
shiny::plotPNG(quartz, png1)
shiny::plotPNG(png, png1)
shiny::plotPNG(png(), png1)
testImage <- as.raster(0:1, nrow=3, ncol=5)
testImage <- as.raster(0:1, nrow=3, ncol=5)
testImage
png('test.png', width=5, height=3, units='px')
par(mar = c(0,0,0,0) )
plot.new()
plotArea = par('fig')
rasterImage(testImage, plotArea[1], plotArea[3],
plotArea[2], plotArea[4], interpolate = FALSE )
dev.off()
png('test.png', width=5, height=3, units='px', type='cairo', antialias=NULL)
# Just want the image, no margins, boarders or other fancy stuff.
par(mar = c(0,0,0,0) )
plot.new()
plotArea = par('fig')
rasterImage(testImage, plotArea[1], plotArea[3],
plotArea[2], plotArea[4], interpolate = FALSE )
dev.off()
testImage <- as.raster(0:1, nrow=3, ncol=5)
png('test.png', width=5, height=3, units='px', type='cairo', antialias="none")
# Just want the image, no margins, boarders or other fancy stuff.
par(mar = c(0,0,0,0) )
plot.new()
plotArea = par('fig')
rasterImage(testImage, plotArea[1], plotArea[3],
plotArea[2], plotArea[4], interpolate = FALSE )
dev.off()
png2
png2
library(imager)
install.packages("imager")
library(imager)
grayscale(png2)
grayscale(png1)
grayscale(png3)
plot(png2)
w <- read.table("global_quality_assessment/synthetic_decoys/electio_selections/1XHP.txt", col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
nmR::nslr(w$status)
w <- read.table("global_quality_assessment/synthetic_decoys/electio_selections/1XHP_real.txt", col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
nmR::nslr(w$status)
w
w <- read.table("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/1XHP_real.txt", col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
nmR::nslr(w$status)
w
nmR::nslr(w$status)
for (rna in train_set){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
cat(sprintf("%s %4.2f\n", rna, nmR::nslr(w$status)))
}
source('~/Documents/GitHub/global_quality_assessment/synthetic_decoys/scripts/analysis_test.R')
nslrs
nslrs$id
nslrs$id
rnas <- unlist(strsplit("1XHP 1Z2J 1ZC5 28SR 2JWV 2K66 2L1V 2L3E 2LPS 2LQZ 2LUN 2M12 2M21 2M22 2M24 2M4W 2M5U 2M8K 2MEQ 2MHI 2MNC 2MXL 2N2O 2N2P 2N4L 2N6S 2N6T 2N6W 2N6X 2NCI 2QH2 2QH4 2RVO 5A17 5A18 5IEM 5KH8 5KMZ 5KQE 5LSN 5LWJ 5N5C 5UF3 5UZT 5V16 5V17 5WQ1 6EZ0", " "))
rnas
for (rna in rnas){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
cat(sprintf("%s %4.2f\n", rna, nmR::nslr(w$status)))
}
setwd("./nmR")
library(roxygen2)
library("devtools")
setwd("/Users/atfrank/Documents/GitHub")
install("nmR")
for (rna in rnas){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
cat(sprintf("%s %4.2f\n", rna, nmR::nslr(w$status)))
}
nmR::run_ga_selection
nmR::fitness
rnas <- unlist(strsplit("1XHP 1Z2J 1ZC5 28SR 2JWV 2K66 2L1V 2L3E 2LPS 2LQZ 2LUN 2M12 2M21 2M22 2M24 2M4W 2M5U 2M8K 2MEQ 2MHI 2MNC 2MXL 2N2O 2N2P 2N4L 2N6S 2N6T 2N6W 2N6X 2NCI 2QH2 2QH4 2RVO 5A17 5A18 5IEM 5KH8 5KMZ 5KQE 5LSN 5LWJ 5N5C 5UF3 5UZT 5V16 5V17 5WQ1 6EZ0", " "))
for (rna in rnas){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
cat(sprintf("%s %4.2f\n", rna, nmR::nslr(w$status)))
}
w
w$rmsd[1]
w$rmsd[1]
rnas <- unlist(strsplit("1XHP 1Z2J 1ZC5 28SR 2JWV 2K66 2L1V 2L3E 2LPS 2LQZ 2LUN 2M12 2M21 2M22 2M24 2M4W 2M5U 2M8K 2MEQ 2MHI 2MNC 2MXL 2N2O 2N2P 2N4L 2N6S 2N6T 2N6W 2N6X 2NCI 2QH2 2QH4 2RVO 5A17 5A18 5IEM 5KH8 5KMZ 5KQE 5LSN 5LWJ 5N5C 5UF3 5UZT 5V16 5V17 5WQ1 6EZ0", " "))
for (rna in rnas){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
cat(sprintf("%s %4.2f %4.2f\n", rna, w$rmsd[1], nmR::nslr(w$status)))
}
rmsd_frame <- NULL
nslrs_frame <- NULL
rnas <- unlist(strsplit("1XHP 1Z2J 1ZC5 28SR 2JWV 2K66 2L1V 2L3E 2LPS 2LQZ 2LUN 2M12 2M21 2M22 2M24 2M4W 2M5U 2M8K 2MEQ 2MHI 2MNC 2MXL 2N2O 2N2P 2N4L 2N6S 2N6T 2N6W 2N6X 2NCI 2QH2 2QH4 2RVO 5A17 5A18 5IEM 5KH8 5KMZ 5KQE 5LSN 5LWJ 5N5C 5UF3 5UZT 5V16 5V17 5WQ1 6EZ0", " "))
for (rna in rnas){
file <- sprintf("~/Documents/GitHub/global_quality_assessment/synthetic_decoys/electio_selections/%s_real.txt", rna)
w <- read.table(file, col.names = c("id", "model", "rmsd", "w"))
w$status <- 0
w$status[w$rmsd < 3] <- 1
w <- w[order(w$w, decreasing = TRUE), ]
rmsd_frame <- c(rmsd_frame, w$rmsd[1])
nslrs_frame <- c(nslrs_frame, nmR::nslr(w$status))
cat(sprintf("%s %4.2f %4.2f\n", rna, w$rmsd[1], nmR::nslr(w$status)))
}
result <- data.frame(rnas, rmsd_frame, nslrs_frame)
result
colMeans()
colMeans(result[,-1])
dev.off()
dev.off()
testImage <- as.raster(0:1, nrow=3, ncol=5)
par(mar = c(0,0,0,0) )
plot.new()
plotArea = par('fig')
rasterImage(testImage, plotArea[1], plotArea[3], plotArea[2], plotArea[4], interpolate = FALSE )
?par(mar = c(0,0,0,0) )
plot.new()
plotArea = par('fig')
rasterImage(testImage, plotArea[1], plotArea[3], plotArea[2], plotArea[4], interpolate = FALSE )
?rasterImage
matplot(png1)
image(png1)
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
sm_average_larmord
source('~/Documents/GitHub/global_quality_assessment/library.R')
make_table_errors_nucleus()
source('~/Documents/GitHub/global_quality_assessment/library.R')
make_table_errors_nucleus()
source('~/Documents/GitHub/global_quality_assessment/library.R')
make_table_errors_nucleus()
get_errors(pairfile = "data/chemical_shifts_1R2P_2LPS.txt")
source('~/Documents/GitHub/global_quality_assessment/library.R')
make_table_errors_nucleus()
get_errors(pairfile = "data/chemical_shifts_1R2P_2LPS.txt")
get_errors(pairfile = "chemical_shifts_1R2P_2LPS.txt")
source('~/Documents/GitHub/global_quality_assessment/library.R')
get_errors(pairfile = "chemical_shifts_1R2P_2LPS.txt")
get_errors(pairfile = "chemical_shifts_1R2P_2LPS_average.txt")
get_errors(pairfile = "chemical_shifts_1R2P_2LPS_average.txt")
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
print(m)
}
all <- NULL
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- order(m$model)
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
}
all
m
all <- NULL
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
}
m
alll
all
all <- NULL
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f %4.2f", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f %4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file)
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "proton")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "carbon")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
1/3.5
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
all
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "carbon", outliers = "none")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "carbon", outliers = "none", error_type = "tau")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.2f/%4.2f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "carbon", outliers = "none", error_type = "tau")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.3f/%4.3f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "proton", outliers = "none", error_type = "tau")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.3f/%4.3f\n", pair, m$error[1], m$error[2]))
}
all <- NULL
pair_names <- c("1R2P_2LPS","2N6Q_5KMZ","2H2X_2M21","2FRL_2M22","2KFC_2L1V")
for (pair in pair_names){
file <- sprintf("chemical_shifts_%s_average.txt", pair)
m <- get_errors(pairfile = file, nucleus_group = "both", outliers = "none", error_type = "tau")
m$pair  <- pair
m <- m[order(m$model), ]
if(is.null(all)){all <- m} else {all <- rbind(all, m)}
cat(sprintf("%s %4.3f/%4.3f\n", pair, m$error[1], m$error[2]))
}
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
min_nslrs
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
remove_outliers
data
data=data.frame(individual=paste( "Mister ", seq(1,60), sep=""),group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,value=sample( seq(10,100), 60, replace=T))
data
# Set a number of 'empty bar' to add at the end of each group
empty_bar=3
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar)
data=rbind(data, to_add)
data=data %>% arrange(group)
data$id=seq(1, nrow(data))
# Get the name and the y position of each label
label_data=data
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data=data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
# Make the plot
p = ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
# library
library(tidyverse)
# Create dataset
data=data.frame(individual=paste( "Mister ", seq(1,60), sep=""),group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,value=sample( seq(10,100), 60, replace=T))
# Libraries
library(tidyverse)
# Create dataset
data=data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
# Make the plot
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
p
?nuclei_importance
?nuclei_importance
nuclei_importance
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = NULL)
nuclei_importance
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = NULL)
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = NULL)
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = NULL)
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3)
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3)
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3)
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/library.R')
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3)
nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = c("C1'","C2'","C3'","C4'","C5'","C2","C5","C6","C8","H1'","H2'","H3'","H4'","H5'","H5''","H2","H5","H6","H8"))
source('~/Documents/GitHub/global_quality_assessment/library.R')
r <- nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers=3, nuclei = c("C1'","C2'","C3'","C4'","C5'","C2","C5","C6","C8","H1'","H2'","H3'","H4'","H5'","H5''","H2","H5","H6","H8"))
r
r$importance
r$importance/sum(r$importance)
r$importance/ma(r$importance)
r$importance/max(r$importance)
r <- nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=2, error_type="mae", outliers="none", nuclei = c("C1'","C2'","C3'","C4'","C5'","C2","C5","C6","C8","H1'","H2'","H3'","H4'","H5'","H5''","H2","H5","H6","H8"))
r$importance/max(r$importance)
r <- nuclei_importance(pairs=c("1R2P_2LPS","2FRL_2M22","2H2X_2M21","2KFC_2L1V","2N6Q_5KMZ"), predictor="larmord", weight=1, error_type="mae", outliers="none", nuclei = c("C1'","C2'","C3'","C4'","C5'","C2","C5","C6","C8","H1'","H2'","H3'","H4'","H5'","H5''","H2","H5","H6","H8"))
r$importance/max(r$importance)
r$importance
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
r$importance/max(r$importance)
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
r$importance/max(r$importance)
source('~/Documents/GitHub/global_quality_assessment/library.R')
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
r$importance/max(r$importance)
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
r$importance/max(r$importance)
source('~/Documents/GitHub/global_quality_assessment/analysis_larmord.R')
r$importance/max(r$importance)
round(r$importance/max(r$importance), 3)
cs[ c("H2", "C8", "C6") %in% cs$nucleus, ]
source('~/Documents/GitHub/global_quality_assessment/synthetic_decoys/scripts/analysis_test.R')
cs[ c("H2", "C8", "C6") %in% cs$nucleus, ]
tmp <-cs[ c("H2", "C8", "C6") %in% cs$nucleus, ]
head(tmp)
tmp <-cs[ cs$nucleus %in% c("H2", "C8", "C6") , ]
head(tmp)
cs <- cs[ cs$nucleus %in% c("H2", "C8", "C6") , ]
cs_cleaner <- clean_data(cs)
cs_cleaner$flag <- 0
cs_cleaner$flag[cs_cleaner$rmsd < 3 ] <- 1
errors <- ddply(.dat=cs_cleaner, .var=c("model","flag", "id"), .fun=nmR::score_mae)
colnames(errors) <- c("model","flag", "id", "error")
errors <- merge(errors, rmsd, by = c("model", "id"))
errors <- errors[order(errors$error, decreasing = FALSE), ]
nslrs <- ddply(.dat=errors, .var=c("id"), .fun= function(x){data.frame(nslr=nmR::nslr(x$flag), rmsd=x$rmsd[1])})
nslrs <- nslrs[!(nslrs$id %in% train_set), ]
rownames(nslrs) <- 1:nrow(nslrs)
nslrs
colMeans(nslrs[, -1])
cs <- merge(predcs, rmsd, by = c("model", "id"))
cs <- merge(expcs, cs, by = c("resname", "resid", "nucleus", "id"))
cs_cleaner <- clean_data(cs)
cs_cleaner$flag <- 0
cs_cleaner$flag[cs_cleaner$rmsd < 3 ] <- 1
errors <- ddply(.dat=cs_cleaner, .var=c("model","flag", "id"), .fun=nmR::score_mae)
colnames(errors) <- c("model","flag", "id", "error")
errors <- merge(errors, rmsd, by = c("model", "id"))
errors <- errors[order(errors$error, decreasing = FALSE), ]
nslrs <- ddply(.dat=errors, .var=c("id"), .fun= function(x){data.frame(nslr=nmR::nslr(x$flag), rmsd=x$rmsd[1])})
nslrs <- nslrs[!(nslrs$id %in% train_set), ]
rownames(nslrs) <- 1:nrow(nslrs)
nslrs
colMeans(nslrs[, -1])
